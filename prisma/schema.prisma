// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?   
  password      String?
  followers     UserRelations[] @relation("Followers")
  followersCount Int @default(0)
  following     UserRelations[] @relation("Following")
  followingCount Int @default(0)
  posts         Post[] @relation("post-user")
  liked         Like[] @relation("like-user")
  comments         Comment[]    @relation("comment-user")
  @@map("users")
}

model UserRelations {
  id    String @id @default(cuid())
  follower User   @relation("Following", fields: [followerId], references: [id])
  followerId String
  following User   @relation("Followers", fields: [followingId], references: [id])
  followingId String
  @@unique([followerId, followingId])
}


model Post {
  id            String      @id @default(cuid())
  title         String
  content       String
  thumbnail     String
  createdAt     DateTime
  updatedAt     DateTime
  authorId      String
  author        User      @relation("post-user",fields: [authorId], references: [id])
  likes         Like[]    @relation("like-post")
  likeCount     Int @default(0)
  comments         Comment[]    @relation("comment-post")
  commentCount     Int @default(0)
  tags    Tag[] @relation("tag-post")
}

model Like{
  id  String @id @default(cuid())
  postId String
  post Post @relation("like-post", fields: [postId], references: [id])
  userId String
  user User @relation("like-user", fields: [userId], references: [id])
  @@unique([postId, userId])
}

model Comment{
  id  String @id @default(cuid())
  postId String
  post Post @relation("comment-post", fields: [postId], references: [id])
  userId String
  user User @relation("comment-user", fields: [userId], references: [id])
  content   String
  createdAt DateTime
  likeCount     Int   @default(0)
  @@unique([postId, userId])
}

model Tag{
  id String @id @default(cuid())
  label String @unique
  posts Post[] @relation("tag-post")
}

